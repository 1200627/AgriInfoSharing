@startuml
' getter/setter は省略
' ########## Provider ##########
interface Provider {
    + void makeKnowHow(int)
    + void evaluateKnowHow()
    + void provide()
    + void requireIncentive()
    + void decide()
}
abstract class AbstractProvider {
    - int ID
    - boolean canRequire
    - List<Information> knowHow
    - int knowHowPointer
    - BigDecimal requiredIncentive
    - BigDecimal earnedIncentive
    - BigDecimal provideProbability
    - BigDecimal contribution
    + void makeKnowHow(int)
    + void evaluateKnowHow()
    + void provide()
    + void requireIncentive()
    + void decide()
}
class RandomProvider {
    + void makeKnowHow(int)
    + void evaluateKnowHow()
}
class Providers {
    +{static} Provider newRandomProvider()
}

AbstractProvider ..|> Provider
RandomProvider --|> AbstractProvider
RandomProvider .r.|> Provider
Providers .r.> RandomProvider : <<create>>

AbstractProvider "1" o-- "1..*" KnowHow

' ########## User ##########

interface User {
    + void requireInformation()
}

abstract class AbstractUser{
    - Consumer selectInformation
    + void requireInformation()
}

abstract class SimpleUser {
}

abstract class DiligentUser {
}

AbstractUser ..|> User
SimpleUser --|> AbstractUser
DiligentUser --|> AbstractUser
SimpleUser ..|> User
DiligentUser ..|> User
User -- InformationNegotiationAgent
User -- AgricultureInformationAgent

' ########## Information ##########
interface Information {
    + void use()
    + BigDecimal calculateWorth()
}
abstract class AbstractInformation {
    - BigDecimal rarity
    - BigDecimal usageCount
    + void use()
    + BigDecimal calculateWorth()
}
class KnowHow {
    - int providerID
    +{static} KnowHow newRandomWorthKnowHow()
    + void consume()
}
class ICTInformation
enum AgricultureInformationType {
    KNOW_HOW
    ICT_INFORMATION
}

AbstractInformation ..|> Information
KnowHow --|> AbstractInformation
ICTInformation --|> AbstractInformation
KnowHow ..|> Information
ICTInformation .l.|> Information

' ########## Server ##########
class AISServer << (S,#FF7700) Singleton >>{
    -{static} AISServer instance
    - List<ServerAgent> agricultureInformationAgents
    +{static} AISServer getInstance()
    + ServerAgent getAgricultureInformationAgent(String)
    +{static} ServerAgent newIncentiveNegotiationAgent()
    +{static} ServerAgent newInformationNegotiationAgent()
}
interface ServerAgent
abstract class AbstractServerAgent
class IncentiveNegotiationAgent {
    + BigDecimal negotiate(int, BigDecimal)
}
class AgricultureInformationAgent {
    - List<Information> agricultureInformation
    + void register(Information)
    + void clear()
    + BigDecimal getInformationWorth(int)
    + void consumeInformation()
}
class InformationNegotiationAgent{
    + List<Information> getAllInformation()
}

AbstractServerAgent ..|> ServerAgent
IncentiveNegotiationAgent --|> AbstractServerAgent
AgricultureInformationAgent --|> AbstractServerAgent
InformationNegotiationAgent --|> AbstractServerAgent
IncentiveNegotiationAgent ..|> ServerAgent
AgricultureInformationAgent ..|> ServerAgent
InformationNegotiationAgent ..|> ServerAgent
AISServer ..> IncentiveNegotiationAgent : <<create>>
AISServer ..> AgricultureInformationAgent : <<create>>
AISServer ..> InformationNegotiationAgent : <<create>>

Provider -- IncentiveNegotiationAgent

@enduml